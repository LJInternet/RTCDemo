plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.linjing.rtc.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs =['jniLibs']
        }
    }


    buildTypes {
        var token = getLocalProperty("token");
        var channelId = getLocalProperty("channelId");
        var appId = getLocalProperty("appId");
        var userId = getLocalProperty("userId");
        debug {
            buildConfigField 'int', 'channelId', channelId == null ? '1212' : channelId
            buildConfigField 'long', 'appId', appId == null ? '1' : appId
            buildConfigField 'long', 'userId', userId == null ? '1222' : userId
            buildConfigField 'String', 'token', token == null ? "\"\"" :  "\"${token}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField 'int', 'channelId', channelId == null ? '1212' : channelId
            buildConfigField 'long', 'appId', appId == null ? '1' : appId
            buildConfigField 'long', 'userId', userId == null ? '1222' : userId
            buildConfigField 'String', 'token', token == null ? "\"\"" :  "\"${token}\""
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libbasestone.so'
        pickFirst 'lib/armeabi-v7a/libbasestone.so'

        pickFirst 'lib/arm64-v8a/librudp.so'
        pickFirst 'lib/armeabi-v7a/librudp.so'

        pickFirst 'lib/arm64-v8a/libaudioengine.so'
        pickFirst 'lib/armeabi-v7a/libaudioengine.so'

        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'

        pickFirst 'lib/arm64-v8a/libljlog.so'
        pickFirst 'lib/armeabi-v7a/libljlog.so'

        pickFirst 'lib/arm64-v8a/liblj-rtmp.so'
        pickFirst 'lib/armeabi-v7a/liblj-rtmp.so'
    }
}

dependencies {
    if (isCloudGame) {
        implementation fileTree(dir: 'cloudGameLibs', include: ['*.jar', '*.aar'])
    } else {
        implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    }

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.30'
    implementation "com.google.code.gson:gson:2.2.4"
}

public String getLocalProperty(String key) {
    String filePath = "${rootDir}${File.separator}local.properties"
    File file = new File(filePath)
    if (!file.exists()) {
        return null
    }
    Properties localPr = new Properties()
    localPr.load(new File(filePath).newDataInputStream())
    return localPr.getProperty(key)
}