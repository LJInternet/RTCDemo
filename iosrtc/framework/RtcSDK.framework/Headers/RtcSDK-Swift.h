
#if defined(__x86_64__) && __x86_64__ || (__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef RTCSDK_SWIFT_H
#define RTCSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <RtcSDK/RtcSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RtcSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSData;

SWIFT_CLASS("_TtC6RtcSDK12Marshallable")
@interface Marshallable : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)pushBoolWithV:(BOOL)v;
- (BOOL)popBool SWIFT_WARN_UNUSED_RESULT;
- (void)pushByteWithV:(int8_t)v;
- (int8_t)popByte SWIFT_WARN_UNUSED_RESULT;
- (void)pushBytesWithV:(NSArray<NSNumber *> * _Nullable)v;
- (NSArray<NSNumber *> * _Nullable)popBytes SWIFT_WARN_UNUSED_RESULT;
- (void)pushInt16WithV:(int16_t)v;
- (int16_t)popInt16 SWIFT_WARN_UNUSED_RESULT;
- (void)pushInt32WithV:(int32_t)v;
- (int32_t)popInt32 SWIFT_WARN_UNUSED_RESULT;
- (void)pushInt64WithV:(int64_t)v;
- (int64_t)popInt64 SWIFT_WARN_UNUSED_RESULT;
- (void)pushString16WithV:(NSString * _Nonnull)v;
- (NSString * _Nonnull)popString16 SWIFT_WARN_UNUSED_RESULT;
- (void)pushString32WithV:(NSString * _Nonnull)v;
- (NSString * _Nonnull)popString32 SWIFT_WARN_UNUSED_RESULT;
- (void)pushObjectWithV:(Marshallable * _Nonnull)v;
- (void)pushObjectArrayWithV:(NSArray<Marshallable *> * _Nonnull)v;
- (NSData * _Nonnull)getData SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (void)unmarshallWithValue:(NSData * _Nonnull)value;
- (void)unmarshallWithBytes:(NSArray<NSNumber *> * _Nonnull)bytes;
- (void)unmarshallWithBuf:(char const * _Nullable)buf size:(int32_t)size;
@end


SWIFT_CLASS("_TtC6RtcSDK16AudioEnableEvent")
@interface AudioEnableEvent : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK16AudioPlayerEvent")
@interface AudioPlayerEvent : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK17AudioProfileEvent")
@interface AudioProfileEvent : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK17AudioUploadConfig")
@interface AudioUploadConfig : Marshallable
@property (nonatomic) NSInteger sampleRate;
@property (nonatomic) NSInteger channels;
@property (nonatomic) NSInteger bitsPerSample;
@property (nonatomic) NSInteger audioBitrateInbps;
@property (nonatomic) NSInteger audioType;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, CHANNEL_PROFILE_TYPE, closed) {
/// 0: Communication. Use this profile when there are only two users in the channel.
  CHANNEL_PROFILE_TYPECHANNEL_PROFILE_COMMUNICATION = 0,
/// 1: Live streaming. Live streaming. Use this profile when there are more than two users in the channel.
  CHANNEL_PROFILE_TYPECHANNEL_PROFILE_LIVE_BROADCASTING = 1,
/// 2: Gaming. This profile is deprecated.
  CHANNEL_PROFILE_TYPECHANNEL_PROFILE_GAME = 2,
/// Cloud gaming. The scenario is optimized for latency. Use this profile if the use case requires frequent interactions between users.
  CHANNEL_PROFILE_TYPECHANNEL_PROFILE_CLOUD_GAMING = 3,
/// @ignore
  CHANNEL_PROFILE_TYPECHANNEL_PROFILE_COMMUNICATION_1v1 = 4,
};

typedef SWIFT_ENUM(int32_t, CLIENT_ROLE_TYPE, closed) {
/// 1: Host. A host can both send and receive streams.
  CLIENT_ROLE_TYPECLIENT_ROLE_BROADCASTER = 1,
/// 2: (Default) Audience. An audience member can only receive streams.
  CLIENT_ROLE_TYPECLIENT_ROLE_AUDIENCE = 2,
};


SWIFT_CLASS("_TtC6RtcSDK27CameraCapturerConfiguration")
@interface CameraCapturerConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, CameraPosition, closed) {
  CameraPositionFront = 0,
  CameraPositionBack = 1,
};


SWIFT_CLASS("_TtC6RtcSDK17CaptureVideoFrame")
@interface CaptureVideoFrame : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UdpInitConfig;

SWIFT_CLASS("_TtC6RtcSDK13ChannelConfig")
@interface ChannelConfig : NSObject
@property (nonatomic, copy) NSArray<UdpInitConfig *> * _Nonnull configs;
@property (nonatomic, copy) NSString * _Nonnull p2pSignalServer;
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic, copy) NSString * _Nonnull optionalInfo;
@property (nonatomic) int64_t appID;
@property (nonatomic) int64_t userID;
@property (nonatomic, copy) NSString * _Nonnull channelID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK19ChannelMediaOptions")
@interface ChannelMediaOptions : Marshallable
/// <summary>
/// Whether to publish the video captured by the camera:true: (Default) Publish the video captured by the camera.false: Do not publish the video captured by the camera.
/// </summary>
@property (nonatomic) BOOL publishCameraTrack;
/// <summary>
/// Whether to publish the video captured by the second camera:true: Publish the video captured by the second camera.false: (Default) Do not publish the video captured by the second camera.
/// </summary>
@property (nonatomic) BOOL publishSecondaryCameraTrack;
/// <summary>
/// Whether to publish the audio captured by the microphone:true: (Default) Publish the audio captured by the microphone.false: Do not publish the audio captured by the microphone.
/// </summary>
@property (nonatomic) BOOL publishMicrophoneTrack;
/// <summary>
/// Whether to publish the video captured from the screen:true: Publish the video captured from the screen.false: (Default) Do not publish the captured video from the screen.This parameter applies to Android and iOS only.
/// </summary>
@property (nonatomic) BOOL publishScreenCaptureVideo;
/// <summary>
/// Whether to publish the audio captured from the screen:true: Publish the audio captured from the screen.false: (Default) Do not publish the audio captured from the screen.This parameter applies to Android and iOS only.
/// </summary>
@property (nonatomic) BOOL publishScreenCaptureAudio;
/// <summary>
/// Whether to publish the video captured from the screen:true: Publish the video captured from the screen.false: (Default) Do not publish the captured video from the screen.
/// </summary>
@property (nonatomic) BOOL publishScreenTrack;
/// <summary>
/// Whether to publish the video captured from the second screen:true: Publish the captured video from the second screen.false: (Default) Do not publish the video captured from the second screen.
/// </summary>
@property (nonatomic) BOOL publishSecondaryScreenTrack;
/// <summary>
/// Whether to publish the audio captured from a custom source:true: Publish the captured audio from a custom source.false: (Default) Do not publish the audio captured from the custom source.
/// </summary>
@property (nonatomic) BOOL publishCustomAudioTrack;
/// <summary>
/// The ID of the custom audio source to publish. The default value is 0.If you have set the value of sourceNumber greater than 1 in SetExternalAudioSource , the SDK creates the corresponding number of custom audio tracks and assigns an ID to each audio track starting from 0.
/// </summary>
@property (nonatomic) int32_t publishCustomAudioSourceId;
/// <summary>
/// Whether to enable AEC when publishing the audio captured from a custom source:true: Enable AEC when publishing the captured audio from a custom source.false: (Default) Do not enable AEC when publishing the audio captured from the custom source.
/// </summary>
@property (nonatomic) BOOL publishCustomAudioTrackEnableAec;
/// @ignore
@property (nonatomic) BOOL publishDirectCustomAudioTrack;
/// @ignore
@property (nonatomic) BOOL publishCustomAudioTrackAec;
/// <summary>
/// Whether to publish the video captured from a custom source:true: Publish the captured video from a custom source.false: (Default) Do not publish the video captured from the custom source.
/// </summary>
@property (nonatomic) BOOL publishCustomVideoTrack;
/// <summary>
/// Whether to publish the encoded video:true: Publish the encoded video.false: (Default) Do not publish the encoded video.
/// </summary>
@property (nonatomic) BOOL publishEncodedVideoTrack;
/// <summary>
/// Whether to publish the audio from the media player:true: Publish the audio from the media player.false: (Default) Do not publish the audio from the media player.
/// </summary>
@property (nonatomic) BOOL publishMediaPlayerAudioTrack;
/// <summary>
/// Whether to publish the video from the media player:true: Publish the video from the media player.false: (Default) Do not publish the video from the media player.
/// </summary>
@property (nonatomic) BOOL publishMediaPlayerVideoTrack;
/// <summary>
/// Whether to publish the local transcoded video:true: Publish the local transcoded video.false: (Default) Do not publish the local transcoded video.
/// </summary>
@property (nonatomic) BOOL publishTrancodedVideoTrack;
/// <summary>
/// Whether to automatically subscribe to all remote audio streams when the user joins a channel:true: (Default) Automatically subscribe to all remote audio streams.false: Do not automatically subscribe to any remote audio streams.
/// </summary>
@property (nonatomic) BOOL autoSubscribeAudio;
/// <summary>
/// Whether to automatically subscribe to all remote video streams when the user joins the channel:true: (Default) Automatically subscribe to all remote video streams.false: Do not automatically subscribe to any remote video streams.
/// </summary>
@property (nonatomic) BOOL autoSubscribeVideo;
/// <summary>
/// Whether to enable audio capturing or playback:true: (Default) Enable audio capturing or playback.false: Do not enable audio capturing or playback.
/// </summary>
@property (nonatomic) BOOL enableAudioRecordingOrPlayout;
/// <summary>
/// The ID of the media player to be published. The default value is 0.
/// </summary>
@property (nonatomic) int32_t publishMediaPlayerId;
/// <summary>
/// The user role. See CLIENT_ROLE_TYPE .
/// </summary>
@property (nonatomic) int32_t clientRoleType;
/// <summary>
/// The channel profile. See CHANNEL_PROFILE_TYPE .
/// </summary>
@property (nonatomic) int32_t channelProfile;
@property (nonatomic) int32_t dataWorkMode;
/// @ignore
@property (nonatomic) BOOL enableBuiltInMediaEncryption;
/// <summary>
/// Whether to publish the sound of a metronome to remote users:true: (Default) Publish the sound of the metronome. Both the local user and remote users can hear the metronome.false: Do not publish the sound of the metronome. Only the local user can hear the metronome.
/// </summary>
@property (nonatomic) BOOL publishRhythmPlayerTrack;
/// <summary>
/// Whether to enable interactive mode:true: Enable interactive mode. Once this mode is enabled and the user role is set as audience, the user can receive remote video streams with low latency.false: (Default) Do not enable interactive mode. If this mode is disabled, the user receives the remote video streams in default settings.This parameter only applies to scenarios involving cohosting across channels. The cohosts need to call the JoinChannelEx method to join the other host's channel as an audience member, and set isInteractiveAudience to true.This parameter takes effect only when the user role is CLIENT_ROLE_AUDIENCE.
/// </summary>
@property (nonatomic) BOOL isInteractiveAudience;
/// <summary>
/// Whether the audio stream being published is filtered according to the volume algorithm:true: (Default) The audio stream is filtered. If the audio stream filter is not enabled, this setting does not takes effect.false: The audio stream is not filtered.If you need to enable this function, contact .
/// </summary>
@property (nonatomic) BOOL isAudioFilterable;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (void)unmarshallWithBuf:(char const * _Nullable)buf size:(int32_t)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK16ChannelVideoInfo")
@interface ChannelVideoInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VideoDelayInfo;

SWIFT_PROTOCOL("_TtP6RtcSDK28DecodeVideoDelayInfoDelegate_")
@protocol DecodeVideoDelayInfoDelegate
- (void)onVideoDecodeFrameWithDelayInfo:(VideoDelayInfo * _Nonnull)delayInfo;
@end


SWIFT_PROTOCOL("_TtP6RtcSDK24DecodeVideoFrameDelegate_")
@protocol DecodeVideoFrameDelegate
- (void)onVideoDecodeFrameWithBuf:(void * _Nonnull)buf size:(NSInteger)size width:(NSInteger)width height:(NSInteger)height pixelFmt:(NSInteger)pixelFmt;
@end


SWIFT_CLASS("_TtC6RtcSDK4FLog")
@interface FLog : NSObject
+ (void)initLogWithLevel:(int32_t)level logPath:(NSString * _Nonnull)logPath logPreName:(NSString * _Nonnull)logPreName openConsole:(BOOL)openConsole SWIFT_METHOD_FAMILY(none);
+ (void)destroy;
+ (void)info:(NSString * _Nonnull)tag :(NSString * _Nonnull)logStr;
+ (void)info:(NSString * _Nonnull)logStr;
+ (void)debug:(NSString * _Nonnull)logStr;
+ (void)error:(NSString * _Nonnull)logStr;
+ (void)debug:(NSString * _Nonnull)tag :(NSString * _Nonnull)logStr;
+ (void)error:(NSString * _Nonnull)tag :(NSString * _Nonnull)logStr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LJChannel;

SWIFT_PROTOCOL("_TtP6RtcSDK22ILJChannelEventHandler_")
@protocol ILJChannelEventHandler
- (void)onNetQuality:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid mLocalQuality:(int32_t)mLocalQuality mRemoteQuality:(int32_t)mRemoteQuality;
- (void)onJoinChannelSuccess:(NSString * _Nonnull)channelId uid:(int64_t)uid elapsed:(int64_t)elapsed;
- (void)onLeaveChannelSuccess:(LJChannel * _Nonnull)ljChannel;
- (void)onLinkStatus:(LJChannel * _Nonnull)ljChannel result:(int32_t)result;
- (void)onUserJoined:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid elapsed:(int64_t)elapsed;
- (void)onUserOffLine:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid;
- (void)onFirstRemoteVideoFrameDecode:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid width:(int32_t)width height:(int32_t)height joinTime:(int64_t)joinTime;
- (void)onVideoSizeChange:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid width:(int32_t)width height:(int32_t)height;
@end

typedef SWIFT_ENUM(int32_t, ISoftDecodeEvents, closed) {
  ISoftDecodeEventsSTART_SOFT_DECODE_EVENT = 0,
  ISoftDecodeEventsSTOP_SOFT_DECODE_EVENT = 1,
  ISoftDecodeEventsON_SOFT_DECODE_SURFACE_CHANGE = 2,
};

@class LJRtcConnection;

SWIFT_CLASS("_TtC6RtcSDK17MultiChannelEvent")
@interface MultiChannelEvent : Marshallable
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic) int64_t uid;
- (nonnull instancetype)initWithConnection:(LJRtcConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6RtcSDK19JoinChannelExConfig")
@interface JoinChannelExConfig : MultiChannelEvent
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic, strong) ChannelMediaOptions * _Nonnull option;
@property (nonatomic) int64_t appId;
@property (nonatomic) BOOL isDebug;
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token isDebug:(BOOL)isDebug appId:(int64_t)appId connection:(LJRtcConnection * _Nonnull)connection options:(ChannelMediaOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConnection:(LJRtcConnection * _Nonnull)connection SWIFT_UNAVAILABLE;
@end

@class AVCaptureSession;
@class AVCaptureVideoPreviewLayer;
enum DeviceType : NSUInteger;
@class AVCaptureDeviceInput;
@class AVCaptureDeviceFormat;

SWIFT_CLASS("_TtC6RtcSDK20LJCaptureSessionBase")
@interface LJCaptureSessionBase : NSObject
@property (nonatomic, readonly, strong) AVCaptureSession * _Nonnull session;
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * _Nullable previewLayer;
@property (nonatomic) double zoom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)start;
- (void)stop;
- (void)focusAt:(CGPoint)point;
+ (AVCaptureDeviceInput * _Nullable)captureDeviceInputWithType:(enum DeviceType)type error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (AVCaptureDeviceFormat * _Nullable)deviceInputFormatWithInput:(AVCaptureDeviceInput * _Nonnull)input width:(NSInteger)width height:(NSInteger)height frameRate:(NSInteger)frameRate SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSUInteger, DeviceType, closed) {
  DeviceTypeFrontCamera = 0,
  DeviceTypeBackCamera = 1,
  DeviceTypeMicrophone = 2,
};

typedef SWIFT_ENUM(NSUInteger, FlashMode, closed) {
  FlashModeOff = 0,
  FlashModeOn = 1,
  FlashModeAuto = 2,
};


SWIFT_CLASS("_TtC6RtcSDK9LJChannel")
@interface LJChannel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6RtcSDK21LJChannelEventHandler")
@interface LJChannelEventHandler : NSObject <ILJChannelEventHandler>
- (void)onNetQuality:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid mLocalQuality:(int32_t)mLocalQuality mRemoteQuality:(int32_t)mRemoteQuality;
- (void)onJoinChannelSuccess:(NSString * _Nonnull)channelId uid:(int64_t)uid elapsed:(int64_t)elapsed;
- (void)onLeaveChannelSuccess:(LJChannel * _Nonnull)ljChannel;
- (void)onLinkStatus:(LJChannel * _Nonnull)ljChannel result:(int32_t)result;
- (void)onUserJoined:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid elapsed:(int64_t)elapsed;
- (void)onUserOffLine:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid;
- (void)onFirstRemoteVideoFrameDecode:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid width:(int32_t)width height:(int32_t)height joinTime:(int64_t)joinTime;
- (void)onVideoSizeChange:(LJChannel * _Nonnull)ljChannel uid:(int64_t)uid width:(int32_t)width height:(int32_t)height;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LJVideoCapture;
@class NSCoder;

SWIFT_CLASS("_TtC6RtcSDK13LJPreviewView")
@interface LJPreviewView : UIView
@property (nonatomic, strong) LJVideoCapture * _Nullable captureSession;
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nullable previewLayer;
@property (nonatomic) BOOL autorotate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@protocol RTCVideoViewShading;

SWIFT_CLASS("_TtC6RtcSDK12LJRemoteView")
@interface LJRemoteView : RTCEAGLVideoView
- (void)layoutSubviews;
- (void)displayYUV420pData:(void * _Nonnull)data size:(NSInteger)size width:(NSInteger)w height:(NSInteger)h;
- (nonnull instancetype)initWithFrame:(CGRect)frame shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK15LJRtcConnection")
@interface LJRtcConnection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RtcEngineConfig;
enum RTCWorkMode : int32_t;
@class VideoEncoderConfiguration;

SWIFT_CLASS("_TtC6RtcSDK11LJRtcEngine")
@interface LJRtcEngine : NSObject
+ (LJRtcEngine * _Nonnull)sharedEngineWithC:(RtcEngineConfig * _Nonnull)c SWIFT_WARN_UNUSED_RESULT;
+ (void)destroy;
- (void)setWorkModeWithMode:(enum RTCWorkMode)mode;
- (void)setVideoEncoderConfigurationWithConfig:(VideoEncoderConfiguration * _Nonnull)config;
- (void)enableVideo;
- (void)disableVideo;
- (void)enableAudio;
- (void)disableAudio;
- (void)setDebugWithDebug:(int32_t)debug;
- (void)muteLocalAudioStreamWithMute:(BOOL)mute;
- (void)muteRemoteAudioStreamWithMute:(BOOL)mute;
- (void)startPreview;
- (void)stopPreview;
- (BOOL)switchCamera SWIFT_WARN_UNUSED_RESULT;
- (void)setupLocalVideoWithView:(LJPreviewView * _Nonnull)view;
- (void)setupRemoteVideoWithView:(UIView * _Nullable)view;
- (BOOL)joinChannelWithChannelConfig:(ChannelConfig * _Nonnull)channelConfig SWIFT_WARN_UNUSED_RESULT;
- (void)registerDecodeVideoFrameObserverWithDelegate:(id <DecodeVideoFrameDelegate> _Nonnull)delegate;
- (void)registerVideoDelayInfoObserverWithDelegate:(id <DecodeVideoDelayInfoDelegate> _Nonnull)delegate;
- (void)leaveChannel;
- (void)setVideoDecodeTypeWithDecodeType:(int32_t)decodeType isLowLatency:(BOOL)isLowLatency;
- (LJChannel * _Nullable)createChannelWithChannelId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
- (LJChannel * _Nullable)createChannelWithChannelId:(NSString * _Nonnull)channelId uid:(int64_t)uid SWIFT_WARN_UNUSED_RESULT;
- (void)releaseChannelWithChannelId:(NSString * _Nonnull)channelId;
- (void)releaseChannelWithChannelId:(NSString * _Nonnull)channelId uid:(int64_t)uid;
- (NSInteger)removeForMultiChannelUserWithConnection:(LJRtcConnection * _Nonnull)connection uid:(int64_t)uid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;

SWIFT_CLASS("_TtC6RtcSDK7LJUtils")
@interface LJUtils : NSObject
+ (UIImage * _Nullable)cropAndScale:(UIImage * _Nonnull)image width:(NSInteger)width height:(NSInteger)height orientation:(UIDeviceOrientation)orientation mirrored:(BOOL)mirrored SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol VideoCapturerDelegate;
@class AVCaptureOutput;
@class AVCaptureConnection;

SWIFT_CLASS("_TtC6RtcSDK14LJVideoCapture")
@interface LJVideoCapture : LJCaptureSessionBase <AVCaptureVideoDataOutputSampleBufferDelegate>
- (nonnull instancetype)initWithConfig:(CameraCapturerConfiguration * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (void)capture:(id <VideoCapturerDelegate> _Nonnull)callback;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)captureOutput didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end


SWIFT_CLASS("_TtC6RtcSDK15LinkStatusEvent")
@interface LinkStatusEvent : Marshallable
@property (nonatomic) int32_t result;
- (void)unmarshallWithBuf:(char const * _Nullable)buf size:(int32_t)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK18MIESoftDecodeEvent")
@interface MIESoftDecodeEvent : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6RtcSDK14MediaMuteEvent")
@interface MediaMuteEvent : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK23MultiChannelEnableEvent")
@interface MultiChannelEnableEvent : MultiChannelEvent
@property (nonatomic) BOOL enable;
- (nonnull instancetype)initWithEnable:(BOOL)enable connection:(LJRtcConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConnection:(LJRtcConnection * _Nonnull)connection SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC6RtcSDK23MultiChannelEventResult")
@interface MultiChannelEventResult : Marshallable
@property (nonatomic, copy) NSString * _Nonnull msg;
@property (nonatomic) int32_t result;
@property (nonatomic) int64_t uid;
@property (nonatomic, copy) NSString * _Nonnull channelId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)unmarshallWithBuf:(char const * _Nullable)buf size:(int32_t)size;
@end


SWIFT_CLASS("_TtC6RtcSDK10NetQuality")
@interface NetQuality : Marshallable
@property (nonatomic) int32_t mLocalQuality;
@property (nonatomic) int32_t mRemoteQuality;
- (void)unmarshallWithBuf:(char const * _Nullable)buf size:(int32_t)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class VideoUploadConfig;
@class TransferConfig;

SWIFT_CLASS("_TtC6RtcSDK9RTCConfig")
@interface RTCConfig : Marshallable
@property (nonatomic) NSInteger uploadType;
@property (nonatomic) int64_t baseTimestamp;
@property (nonatomic) int32_t enableAudio;
@property (nonatomic) int32_t enableVideo;
@property (nonatomic, strong) AudioUploadConfig * _Nonnull audioUploadConfig;
@property (nonatomic, strong) VideoUploadConfig * _Nonnull videoUploadConfig;
@property (nonatomic, strong) TransferConfig * _Nonnull transferConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(int32_t, RTCDataWorkMode, closed) {
  RTCDataWorkModeSEND_AND_RECV = 0,
  RTCDataWorkModeSEND_ONLY = 1,
  RTCDataWorkModeRECV_ONLY = 2,
  RTCDataWorkModeLOCK_STEP_SEND_RECV = 3,
};

typedef SWIFT_ENUM(int32_t, RTCWorkMode, closed) {
  RTCWorkModePull = 0,
  RTCWorkModePush = 1,
};


SWIFT_CLASS("_TtC6RtcSDK15RtcEngineConfig")
@interface RtcEngineConfig : Marshallable
@property (nonatomic, copy) NSString * _Nonnull mAppId;
@property (nonatomic, copy) NSString * _Nonnull mAppUa;
@property (nonatomic) BOOL isTestEv;
@property (nonatomic) BOOL enableNativeLog;
@property (nonatomic, copy) NSString * _Nonnull logPath;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK21SubscriberStreamEvent")
@interface SubscriberStreamEvent : MultiChannelEvent
@property (nonatomic) int64_t subscriberUid;
- (nonnull instancetype)initWithSubscriberUid:(int64_t)subscriberUid connection:(LJRtcConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConnection:(LJRtcConnection * _Nonnull)connection SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6RtcSDK14TransferConfig")
@interface TransferConfig : Marshallable
@property (nonatomic, copy) NSArray<UdpInitConfig *> * _Nonnull configs;
@property (nonatomic) int32_t transferMode;
@property (nonatomic, copy) NSString * _Nonnull p2pSignalServer;
@property (nonatomic) int64_t appID;
@property (nonatomic) int64_t userID;
@property (nonatomic, copy) NSString * _Nonnull channelID;
@property (nonatomic, copy) NSString * _Nonnull token;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6RtcSDK11TransferMsg")
@interface TransferMsg : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK13UdpInitConfig")
@interface UdpInitConfig : Marshallable
@property (nonatomic) int64_t relayId;
@property (nonatomic) NSInteger netType;
@property (nonatomic, copy) NSString * _Nonnull remoteIP;
@property (nonatomic) NSInteger remotePort;
@property (nonatomic) NSInteger remoteSessionId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(int32_t, UnsubscribeType, closed) {
  UnsubscribeTypeAUDIO_CALLBACK_MIC = 1,
  UnsubscribeTypeAUDIO_CALLBACK_SUBMIX = 2,
  UnsubscribeTypeAUDIO_CALLBACK_MIXED = 3,
  UnsubscribeTypeAUDIO_CALLBACK_DECODE = 4,
  UnsubscribeTypeAUDIO_CALLBACK_DECODE_EX = 5,
  UnsubscribeTypeVIDEO_CALLBACK_ENCODE = 50,
  UnsubscribeTypeVIDEO_CALLBACK_DECODE = 51,
  UnsubscribeTypeVIDEO_CALLBACK_CAPTURE = 52,
  UnsubscribeTypeVIDEO_CALLBACK_SCREEN_CAPTURE = 53,
};


SWIFT_PROTOCOL("_TtP6RtcSDK21VideoCapturerDelegate_")
@protocol VideoCapturerDelegate
- (void)onVideoCaptureWithSampleBuffer:(CVPixelBufferRef _Nonnull)sampleBuffer buf:(void * _Nonnull)buf size:(NSInteger)size bytesPerRow:(NSInteger)bytesPerRow width:(NSInteger)width height:(NSInteger)height pixelFmt:(NSInteger)pixelFmt;
@end


SWIFT_CLASS("_TtC6RtcSDK17VideoDecodeConfig")
@interface VideoDecodeConfig : NSObject
@property (nonatomic) int32_t decodeType;
@property (nonatomic) BOOL isLowLatency;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK14VideoDelayInfo")
@interface VideoDelayInfo : NSObject
@property (nonatomic) NSInteger totalDelay;
@property (nonatomic) NSInteger decodeDelay;
@property (nonatomic) NSInteger encodeDelay;
@property (nonatomic) NSInteger transDelay;
@property (nonatomic) NSInteger reciveDealy;
@property (nonatomic) NSInteger fps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK25VideoEncoderConfiguration")
@interface VideoEncoderConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK17VideoUploadConfig")
@interface VideoUploadConfig : Marshallable
/// 视频
@property (nonatomic) NSInteger encodeWidth;
@property (nonatomic) NSInteger encodeHeight;
@property (nonatomic) NSInteger fps;
@property (nonatomic) NSInteger mirror;
@property (nonatomic) NSInteger minVideoBitrateInbps;
@property (nonatomic) NSInteger maxVideoBitrateInbps;
@property (nonatomic) NSInteger realVideoBitrateInbps;
@property (nonatomic) NSInteger codecType;
@property (nonatomic) NSInteger keyFrameInterval;
@property (nonatomic) NSInteger bitrateMode;
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6RtcSDK16WebSocketMessage")
@interface WebSocketMessage : Marshallable
- (NSArray<NSNumber *> * _Nonnull)marshall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
